version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: wastewise-postgres-dev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wastewise
    ports:
      - "5432:5432"
    volumes:
      - pgdata-dev:/var/lib/postgresql/data
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: wastewise-backend-dev
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - backend-node-modules:/app/node_modules
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=postgres
      - NODE_ENV=development
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: npm run start:dev

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: wastewise-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend-node-modules:/app/node_modules
    env_file:
      - ./frontend/.env
    environment:
      - VITE_API_BASE_URL=http://localhost:3000/api/v1
      - VITE_NODE_ENV=development
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    depends_on:
      - backend

  # Adminer - Interfață pentru administrarea bazei de date
  adminer:
    image: adminer:latest
    container_name: wastewise-adminer-dev
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis pentru cache și sesiuni (opțional)
  redis:
    image: redis:alpine
    container_name: wastewise-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data-dev:/data
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MinIO pentru stocare documente (opțional)
  minio:
    image: minio/minio:latest
    container_name: wastewise-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data-dev:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: server /data --console-address ":9001"

networks:
  wastewise-network-dev:
    driver: bridge

volumes:
  pgdata-dev:
  backend-node-modules:
  frontend-node-modules:
  redis-data-dev:
  minio-data-dev:
