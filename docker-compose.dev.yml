services:
  # Notă: Baza de date PostgreSQL este acum folosită de pe serverul remote (10.10.10.116)
  # și nu mai este necesară rularea unui container local pentru PostgreSQL

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: wastewise-backend-dev
    ports:
      - "3030:3030"
    volumes:
      - ./backend:/app
      - backend-node-modules:/app/node_modules
    env_file:
      - ./backend/.env
    environment:
      # Folosim baza de date remotă definită în .env (10.10.10.116)
      - NODE_ENV=development
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: npm run start:dev

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: wastewise-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend-node-modules:/app/node_modules
    env_file:
      - ./frontend/.env
    environment:
      - VITE_API_BASE_URL=http://localhost:3030/api/v1
      - VITE_NODE_ENV=development
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    depends_on:
      - backend

  # Adminer - Interfață pentru administrarea bazei de date
  adminer:
    image: adminer:latest
    container_name: wastewise-adminer-dev
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=10.10.10.116
    networks:
      - wastewise-network-dev
    restart: unless-stopped

  # Redis pentru cache și sesiuni (opțional)
  redis:
    image: redis:alpine
    container_name: wastewise-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data-dev:/data
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MinIO pentru stocare documente (opțional)
  minio:
    image: minio/minio:latest
    container_name: wastewise-minio-dev
    ports:
      - "9090:9000"
      - "9091:9001"
    volumes:
      - minio-data-dev:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    command: server /data --console-address ":9001"

  # Prometheus pentru monitorizare
  prometheus:
    image: prom/prometheus:latest
    container_name: wastewise-prometheus-dev
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data-dev:/prometheus
    ports:
      - "9092:9090"
    networks:
      - wastewise-network-dev
    restart: unless-stopped

  # Grafana pentru vizualizare
  grafana:
    image: grafana/grafana:latest
    container_name: wastewise-grafana-dev
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data-dev:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter pentru metrici sistem
  node-exporter:
    image: prom/node-exporter:latest
    container_name: wastewise-node-exporter-dev
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - wastewise-network-dev
    restart: unless-stopped

  # cAdvisor pentru metrici containere
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: wastewise-cadvisor-dev
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - wastewise-network-dev
    restart: unless-stopped

  # Loki pentru logging
  loki:
    image: grafana/loki:latest
    container_name: wastewise-loki-dev
    ports:
      - "3100:3100"
    volumes:
      - loki-data-dev:/loki
    networks:
      - wastewise-network-dev
    restart: unless-stopped

  # Promtail pentru colectare log-uri
  promtail:
    image: grafana/promtail:latest
    container_name: wastewise-promtail-dev
    volumes:
      - /var/log:/var/log
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - wastewise-network-dev
    restart: unless-stopped
    depends_on:
      - loki

networks:
  wastewise-network-dev:
    driver: bridge

volumes:
  # pgdata-dev: # Nu mai este necesar, folosim baza de date remotă
  backend-node-modules:
  frontend-node-modules:
  redis-data-dev:
  minio-data-dev:
  prometheus-data-dev:
  grafana-data-dev:
  loki-data-dev:
