name: Project Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose*.yml'
      - '.github/workflows/project-build.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker-compose*.yml'
      - '.github/workflows/project-build.yml'
  workflow_dispatch:

jobs:
  docker-compose:
    name: Build Docker Compose
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with docker-compose
        run: |
          docker-compose -f docker-compose.yml build

      - name: Test docker-compose configuration
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.dev.yml config
          docker-compose -f docker-compose.prod.yml config

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: docker-compose
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Wait for services to be ready
        run: |
          # Așteptăm ca serviciile să fie disponibile
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Check backend health
        run: |
          # Verificăm dacă backend-ul este disponibil
          curl -s http://localhost:3000 || true
          docker-compose logs backend

      - name: Check frontend availability
        run: |
          # Verificăm dacă frontend-ul este disponibil
          curl -s http://localhost:8080 || true
          docker-compose logs frontend

      - name: Stop services
        run: |
          docker-compose -f docker-compose.yml down

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './${{ matrix.service }}/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./${{ matrix.service }}

      - name: Create .env file
        run: cp .env.example .env
        working-directory: ./${{ matrix.service }}

      - name: Build
        run: npm run build
        working-directory: ./${{ matrix.service }}
